'''
给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。
设计一个算法来计算你所能获取的最大利润。你可以尽可能地完成更多的交易（多次买卖一支股票）。
注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。
示例 1:
输入: [7,1,5,3,6,4]
输出: 7
解释: 在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。
     随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = 6-3 = 3 。
示例 2:
输入: [1,2,3,4,5]
输出: 4
解释: 在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。
     注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。
     因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。
示例 3:
输入: [7,6,4,3,1]
输出: 0
解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。
# 题解： 找到买卖的最佳时间，买的最佳时间，卖的最佳时间分别有状态


来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-ii
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
'''
class Solution(object):
    def maxProfit(self, prices):
        """
        :type prices: List[int]
        :rtype: int
        """
        # 多次交易，考虑买入，卖出的两个状态 （所以需要二维的向量表示，【天数】【状态】）
        # dp[i][j] 第i天第j个状态（j = 0 买入状态， j = 1 卖出状态）
        # 第i天的状态转移：
        # dp[i][0] = 第i天 ， 买入后的利润
        # dp[i][1] = 第i天， 卖出后的利润
        dp = [[0 for ind in range(2)] for ind in range(len(prices)) ]
        dp[0][1] = 0  
        dp[0][0] = -prices[0]
        
        for ind in range(1,len(prices)):
            # 第ind天，买入后的利润 = 前一个时刻买入后的利润 ， 前一个时刻卖出后的利润 - 此刻需要买入需要花费 
            dp[ind][0] = max(dp[ind-1][0] , dp[ind-1][1] - prices[ind]) 

            # 第ind天，卖出后的利润 = 前一个时刻卖出后的利润， 或者 前一个时刻买入后的利润 + 此刻需要卖出得到的钱
            dp[ind][1] = max(dp[ind-1][1], dp[ind-1][0] +  prices[ind])
            
        #print(dp)
        return dp[len(prices)-1][1] 



